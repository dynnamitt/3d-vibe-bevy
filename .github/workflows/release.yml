name: Build and Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      create_release:
        description: 'Create a new release'
        required: true
        default: 'true'
        type: boolean

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    name: Build for ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - target: x86_64-pc-windows-gnu
            os: ubuntu-latest
            cross: true
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            cross: false
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            cross: false

    steps:
    - uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Install cross-compilation tools (Linux to Windows)
      if: matrix.cross
      run: |
        sudo apt-get update
        sudo apt-get install -y mingw-w64

    - name: Install Linux dependencies
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y libasound2-dev libudev-dev libxkbcommon-dev

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: ~/.cargo/registry
        key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-registry-

    - name: Cache cargo index
      uses: actions/cache@v4
      with:
        path: ~/.cargo/git
        key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-index-

    - name: Cache target directory
      uses: actions/cache@v4
      with:
        path: target
        key: ${{ matrix.target }}-target-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ matrix.target }}-target-

    - name: Build release
      run: |
        if [ "${{ matrix.cross }}" = "true" ]; then
          cargo build --release --target ${{ matrix.target }}
        else
          cargo build --release --target ${{ matrix.target }}
        fi

    - name: Create release directory
      run: |
        mkdir -p release/visio-vibe1-${{ matrix.target }}
        cp target/${{ matrix.target }}/release/visio-vibe1* release/visio-vibe1-${{ matrix.target }}/
        cp README.txt release/visio-vibe1-${{ matrix.target }}/ 2>/dev/null || echo "README.txt not found, skipping"
        cp CLAUDE.md release/visio-vibe1-${{ matrix.target }}/

    - name: Create README for release
      run: |
        cat > release/visio-vibe1-${{ matrix.target }}/README.txt << 'EOF'
        Visio Vibe 1 - 3D Object Viewer
        ================================

        A Bevy-based 3D object viewer with interactive controls.

        FEATURES:
        - View different 3D objects (Cube, Sphere, Cylinder, Torus, Cone)
        - Each object has distinct colors and materials
        - Mouse controls: Click and drag to rotate, scroll to scale
        - Keyboard controls: WASD/Arrow keys to move, Q/E for depth
        - UI panel with buttons for precise movement and rotation
        - Ground plane with shadow casting
        - Real-time lighting with PBR materials

        CONTROLS:
        - Mouse: Click and drag to rotate object, scroll wheel to scale
        - Keyboard: WASD or Arrow keys for XY movement, Q/E for Z movement
        - UI Panel: Use buttons for precise control and object selection
        - Dropdown: Select different 3D object types

        SYSTEM REQUIREMENTS:
        - Windows 10+ (x64) / Linux x86_64
        - OpenGL 3.3+ or Vulkan support
        - Graphics drivers supporting PBR rendering

        Built with Bevy 0.15.0 game engine.
        EOF

    - name: Create archive (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        cd release
        7z a visio-vibe1-${{ matrix.target }}.zip visio-vibe1-${{ matrix.target }}/

    - name: Create archive (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        cd release
        zip -r visio-vibe1-${{ matrix.target }}.zip visio-vibe1-${{ matrix.target }}/

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: visio-vibe1-${{ matrix.target }}
        path: release/visio-vibe1-${{ matrix.target }}.zip

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/') || (github.event_name == 'workflow_dispatch' && github.event.inputs.create_release == 'true')

    steps:
    - uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: ./artifacts

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ github.ref_name || 'manual-release' }}
        name: Release ${{ github.ref_name || 'Manual Release' }}
        body: |
          ## Visio Vibe 1 - 3D Object Viewer

          ### Features
          - Interactive 3D object viewer with Bevy engine
          - Multiple object types: Cube, Sphere, Cylinder, Torus, Cone
          - Mouse and keyboard controls for object manipulation
          - UI panel with precise controls
          - Real-time PBR lighting and shadows

          ### Downloads
          - **Windows x64**: `visio-vibe1-x86_64-pc-windows-msvc.zip`
          - **Windows x64 (GNU)**: `visio-vibe1-x86_64-pc-windows-gnu.zip`
          - **Linux x64**: `visio-vibe1-x86_64-unknown-linux-gnu.zip`

          ### System Requirements
          - Windows 10+ or Linux x86_64
          - OpenGL 3.3+ or Vulkan support
          - Modern graphics drivers
        files: |
          ./artifacts/*/*.zip
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}